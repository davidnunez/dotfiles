#!/bin/bash
 
###############################################################################
# utilities
###############################################################################
function show
{
	echo $'\e[1;34m==>\e[0m\e[31m' $1 $'\e[0m'
}

function run
{
	show "$1"
	eval "$1"
	return $?
}

function abort
{
	if [[ -n "$2" ]]; then
		run "$2"
	fi
	echo $'\e[1;31merror:' $1 $'\e[0m' >&2
	exit 1
}

function ask
{
	echo -n $'\n\e[1;35m'
	read -p "$1 (y/n) [n] ... "
	echo -n $'\e[0;0m'
}

###############################################################################
# installing freetds with unixodbc
###############################################################################
if ! type brew >/dev/null; then
	abort "prerequisite homebrew not installed"
fi

function install_freetds
{
	run "brew install unixodbc" || abort "could not install unixodbc"
	run "brew install --with-unixodbc freetds" || abort "could not install freetds with unixodbc"
	run "brew unlink unixodbc && brew link --overwrite unixodbc"
	run "brew unlink freetds && brew link --overwrite freetds"
}

if ! brew list freetds >/dev/null 2>&1; then
	install_freetds
fi

if [[ -z $(brew info freetds 2>&1  | grep "Built from source with" | grep -- "--with-unixodbc") ]]; then
	show "installed freetds not build with unixodbc, reinstalling..."
	run "brew uninstall freetds" || abort "could not uninstall freetds"
	install_freetds
fi

###############################################################################
# detect settings
###############################################################################
if [[ -d /opt/vertica/lib64 ]]; then
	VERTICA_LIBRARY_PATH="/opt/vertica/lib64"
elif [[ -d /opt/vertica/lib ]]; then
	VERTICA_LIBRARY_PATH="/opt/vertica/lib"
fi
VERTICA_DRIVER="$(find $VERTICA_LIBRARY_PATH -name "libverticaodbc.*" | egrep "$VERTICA_LIBRARY_PATH/libverticaodbc.(dylib|so)$")"
MSSQL_DRIVER="$(brew ls -v freetds | grep libtdsodbc.so)"

# osql requires drivers be executable
run "chmod +x $VERTICA_DRIVER"
run "chmod +x $MSSQL_DRIVER"

###############################################################################
# odbcinst.ini
###############################################################################
show "creating ~/.odbcinst.ini..."
cat > "$HOME/.odbcinst.ini" <<EOF
[ODBC]
Threading = No
Trace = Yes
Debug = Yes
TraceFile = /tmp/odbctrace.log
DebugFile = /tmp/odbcdebug.log

EOF
run "cat $HOME/.odbcinst.ini"

###############################################################################
# odbc.ini
###############################################################################
show "creating ~/.odbc.ini..."
cat > "$HOME/.odbc.ini" <<EOF
[vertica]
Driver = $VERTICA_DRIVER
ColumnsAsChar = true

[mssql]
Driver = $MSSQL_DRIVER
Setup = $MSSQL_DRIVER
UsageCount = 1
TDS_Version = 8.0
Server = aacube01
Port = 1433

EOF
run "cat $HOME/.odbc.ini"

###############################################################################
# installing configuration files
###############################################################################
function install_to
{
	local install_to_path="$@"
	run "sudo mkdir -p $install_to_path/" || abort "can't create directory $install_to_path"
	run "sudo cp -vf $HOME/.odbcinst.ini $install_to_path/odbcinst.ini" || abort "can't install $install_to_path/odbcinst.ini"
	run "sudo cp -vf $HOME/.odbc.ini $install_to_path/odbc.ini" || abort "can't install $install_to_path/odbc.ini"
}

install_to "$HOME/Library/ODBC"
install_to "/Library/ODBC"
install_to "/usr/local/etc"
install_to "/usr/etc"
install_to "" # root

if type odbcinst >/dev/null 2>&1; then
	# install to odbcinst -j locations
	run "sudo cat $HOME/.odbcinst.ini > $(odbcinst -j | grep DRIVERS | awk '{print $2}')"
	run "sudo cat $HOME/.odbc.ini > $(odbcinst -j | grep 'SYSTEM DATA SOURCES' | awk '{print $4}')"
fi

###############################################################################
# user environment
###############################################################################
ask "You will need to install the following into your bash profile, do you understand?"
[[ "$REPLY" != "y" ]] && abort "Please seek out an IT person or a developer."
cat <<ENDOFBASHRC
################################################################################
# Vertica Setup
################################################################################

# prefer lib64 over lib
if [[ -d /opt/vertica/lib64 ]]; then
	VERTICA_LIBRARY_PATH="/opt/vertica/lib64"
	VERTICA_ERRORMESSAGESPATH="/opt/vertica/lib64"
elif [[ -d /opt/vertica/lib ]]; then
	VERTICA_LIBRARY_PATH="/opt/vertica/lib"
	VERTICA_ERRORMESSAGESPATH="/opt/vertica/lib"
fi

# install ~/.vertica.ini
if [[ -n "\$(uname -s | grep 'Darwin')" ]]; then # OS X
	ODBC_LIB="\$(find /usr -name libodbcinst.dylib -print -quit)"
	cat >"\$HOME/.vertica.ini" <<EOF
[Driver]
DriverManagerEncoding=UTF-32
ODBCInstLib=\$ODBC_LIB
ErrorMessagesPath=\$VERTICA_ERRORMESSAGESPATH
LogLevel=4
LogPath=/tmp
EOF
else # Linux
	ODBC_LIB="\$(find /usr -name libodbcinst.so -print -quit)"
	cat >"\$HOME/.vertica.ini" <<EOF
[Driver]
DriverManagerEncoding=UTF-16
ODBCInstLib=\$ODBC_LIB
ErrorMessagesPath=\$VERTICA_ERRORMESSAGESPATH
LogLevel=4
LogPath=/tmp
EOF
fi

# setup vertica environment
export VERTICAINI="\$HOME/.vertica.ini"
export DYLD_LIBRARY_PATH="\$VERTICA_LIBRARY_PATH:\$DYLD_LIBRARY_PATH"

# add client to PATH
[[ -d /opt/vertica/bin ]] && export PATH="\$PATH:/opt/vertica/bin"

# make compile flags handy
ODBC_FLAGS="-I/opt/vertica/include -lverticaodbc"
if [[ -d /opt/vertica/lib64 ]]; then
	ODBC_FLAGS="$ODBC_FLAGS -L/opt/vertica/lib64"
elif [[ -d /opt/vertica/lib ]]; then
	ODBC_FLAGS="$ODBC_FLAGS -L/opt/vertica/lib"
fi
export ODBC_FLAGS
export VERTICA_FLAGS="$ODBC_FLAGS"
export ODBC_CONFIG="odbc_config" # unixOBDC's config binary

ENDOFBASHRC
