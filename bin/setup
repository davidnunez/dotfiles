#!/bin/bash

# Install applications and development environment on an OS X machine.

################################################################################
# Settings
################################################################################
# BEGIN GENERATED PACKAGE LISTS
HOMEBREW_FORMULAS="                                                            \
    autoconf automake bash bison boost cloog cmake coreutils cppunit dmd       \
    docker docker-machine doxygen faac ffmpeg fontconfig freetype gd gdbm      \
    geoip gettext ghostscript gifify gifsicle git git-review glib gmp gmp4     \
    gnu-sed gnu-tar gnupg go gradle htop-osx id3lib id3v2 imagemagick isl      \
    jasper jbig2dec jhead jpeg jq lame libevent libffi libgpg-error libgphoto2 \
    libicns libksba libmpc libpng libtiff libtool libusb libusb-compat         \
    libvo-aacenc libyaml little-cms2 lzlib makedepend maven md5sha1sum         \
    memcached mercurial mongodb mpfr ncftp nginx node onepass oniguruma        \
    openssl ossp-uuid pandoc pcre pidof pkg-config plotutils pngquant          \
    postgresql rabbitmq readline redis ruby rust s3cmd sane-backends scons     \
    sdl2 sdl2_image shellcheck sloccount spark sqlite storm swig tree unixodbc \
    unrar vramsteg watch webp wget x264 xvid xz yaml-cpp youtube-dl z zeromq   \
    zookeeper zsh"

HOMEBREW_CASKS="                                                               \
    1password adium amazon-music atom audacity balsamiq-mockups battle-net     \
    caffeine chromecast clamxav cyberduck dbvisualizer disk-inventory-x        \
    dropbox evernote firefox flux google-chrome google-hangouts hipchat        \
    iexplorer istumbler iterm2 java kaleidoscope lisanet-gimp mactex           \
    mysqlworkbench oclint robomongo silverlight skype slack snes9x soundflower \
    sourcetree spectacle spotify steam sublime-text teamviewer texstudio       \
    transmission vlc xquartz"

ATOM_PACKAGES="                                                                \
    atom-beautify atom-pair autocomplete-python column-select cursor-indicator \
    event-watch file-icons gruvbox highlight-selected isotope-light-ui         \
    isotope-ui language-applescript language-diff language-latex language-rust \
    linter linter-alex linter-clang linter-coffeelint linter-csslint           \
    linter-erb linter-just-say-no linter-pep8 linter-pyflakes linter-raml      \
    linter-shellcheck linter-tidy linter-write-good minimap minimap-codeglance \
    minimap-find-and-replace minimap-git-diff minimap-highlight-selected       \
    minimap-selection monokai multi-wrap-guide next-occurrence nvatom          \
    python-isort python-yapf rainbow-selection raml red-wavy-underline script  \
    set-syntax soft-wrap-indicator sort-lines swackets symbols-tree-view       \
    tab-control tabs-to-spaces todo-show toggle-quotes trailing-spaces"

PIP_PACKAGES="                                                                 \
    anyjson backports.ssl-match-hostname beautifulsoup4 bson cssutils fabric   \
    flake8 google-api-python-client httplib2 iniparse inlinestyler isort jedi  \
    oauth2client oauthlib pep8 pyasn1-modules pydruid pyflakes pymongo         \
    python-cson python-dateutil python-twitter pytz requests requests-oauthlib \
    rsa simplejson suds termcolor tinycss uritemplate wsgiref"

CONDA_PACKAGES="                                                               \
    abstract-rendering alabaster anaconda appscript apptools argcomplete       \
    astropy atom babel bcolz beautiful-soup biopython bitarray blaze           \
    blaze-core blz bokeh boto bottleneck casuarius cdecimal certifi cffi chaco \
    clyent colorama conda conda-build conda-env configobj cryptography cubes   \
    cudatoolkit curl cython cytoolz datashape dateutil decorator docutils      \
    dynd-python ecdsa enable enaml enum34 envisage fastcache flask freetype    \
    funcsigs future futures gevent gevent-websocket greenlet grin h5py hdf5    \
    idna into ipaddress ipython ipython-notebook ipython-qtconsole             \
    itsdangerous jdcal jinja2 jpeg jsonschema keyring kiwisolver launcher lcms \
    libdynd libnetcdf libpng libsodium libtiff libxml2 libxslt llvm llvmlite   \
    llvmpy lxml markupsafe matplotlib mayavi mccabe mdp mercurial mistune mock \
    modules multipledispatch natsort netcdf4 networkx nltk node-webkit nose    \
    numba numexpr numpy odo openpyxl openssl pandas paramiko patsy pbr pies    \
    pies2overrides pil pillow pip ply psutil ptyprocess pyasn1 pyaudio pycosat \
    pycparser pycrypto pycurl pyface pygments pyopenssl pyparsing pyqt pysal   \
    pysam pyside pytables pytest python.app pyyaml pyzmq qt readline redis     \
    redis-py rope runipy scikit-image scikit-learn scipy setuptools shiboken   \
    sip six snowballstemmer sockjs-tornado sphinx sphinx-rtd-theme             \
    sphinx_rtd_theme spyder spyder-app sqlalchemy sqlite ssl_match_hostname    \
    statsmodels sympy terminado tk toolz tornado traits traitsui ujson         \
    unicodecsv vtk werkzeug xlrd xlsxwriter xlwings xlwt yaml zeromq zlib"

GEM_PACKAGES="                                                                 \
    actionmailer actionpack actionview activejob activesupport                 \
    archive-tar-minitar arr-pm backports bigdecimal blankslate bson bson_ext   \
    builder bundler bundler-unload cabin cap_gun capistrano capistrano-stats   \
    celluloid celluloid-essentials celluloid-extras celluloid-fsm              \
    celluloid-pool celluloid-supervision childprocess claide clamp             \
    classifier-reborn cocoapods cocoapods-core cocoapods-deintegrate           \
    cocoapods-downloader cocoapods-plugins cocoapods-search cocoapods-stats    \
    cocoapods-trunk cocoapods-try coffee-script coffee-script-source colorator \
    colored colorize cuba dotenv erector erubis escape execjs executable-hooks \
    fast-stemmer ffi fpm fuzzy_match gem-wrappers globalid hitimes i18n        \
    io-console jekyll jekyll-coffeescript jekyll-gist jekyll-paginate          \
    jekyll-sass-converter jekyll-watch jewelbox json json_pure kramdown liquid \
    listen log4r lolcat loofah mail mercenary mime-types mini_portile minitest \
    molinillo mongo multi_json nap nenv net-ldap net-scp net-ssh netrc         \
    nokogiri open4 paint parslet polyglot posix-spawn power_assert psych       \
    puppet-lint pygments.rb rack rack-protection rack-test                     \
    rails-deprecated_sanitizer rails-dom-testing rails-html-sanitizer          \
    railsless-deploy rake rb-fsevent rb-inotify rdoc redcarpet rouge           \
    rspec-logsplit rubygems-bundler rvm safe_yaml sass shotgun sshkit          \
    test-unit thread_safe timers toml treetop trollop tzinfo xcodeproj         \
    yajl-ruby"

NODE_MODULES="                                                                 \
    alex coffee-script coffeelint cson js-beautify tmpin"
# END GENERATED PACKAGE LISTS

ITEM_LISTS=(HOMEBREW_FORMULAS HOMEBREW_CASKS ATOM_PACKAGES PIP_PACKAGES
    CONDA_PACKAGES GEM_PACKAGES NODE_MODULES)

################################################################################
# Utilities
################################################################################
cleanup_item_list()
{
    # A useful function for cleaning up the above item lists.
    # This is an implementation detail, and is used by update scripts.
    # Usage: setup -i (aka --items)
    local items_var lines leftover
    declare -a lines
    items_var="$1"
    IFS=$'\n'
    lines=("$items_var=\"")
    lines+=($(eval "echo \$$items_var"  \
        | sed "s/  */ /g;s/^ *//g;"     \
        | tr ' ' '\n'                   \
        | sort -u                       \
        | tr '\n' ' '                   \
        | fold -w 75 -s                 \
        | sed 's/^/    /g;s/ $//g'))
    for ((n=0;n<${#lines[@]};n++)); do
        line="${lines[$n]}"
        leftover="$((80 - ${#line} - 1))"
        echo -n "$line"
        if [[ $((n + 1)) != "${#lines[@]}" ]]; then
            for ((i=1;i<=leftover;i++)); do
                echo -n ' '
            done
            echo "\\"
        else
            echo "\""
        fi
    done
    echo
}

show_items()
{
    # Pretty prints an item list suitable for usage help.
    local list_name="$1"
    local list_title
    list_title="$(echo "$list_name"                                            \
        | tr '[:upper:]' '[:lower:]'                                           \
        | tr '_' ' '                                                           \
        | awk '{for (i=1;i <= NF;i++) {
            sub(".",substr(toupper($i),1,1),$i)} print}')"
    local output="$list_title:"
    output="$output $(eval "echo \$$list_name" | sed "s/^ *//g;s/  */, /g")"
    echo "$output" | fold -w 80 -s
    echo
}

usage()
{
    (
        echo "usage: ${0##*/} [-l|-d|-f|-h|--help] [all|step-name(s)]"
        echo "Automatically installs and configures a complete OS X developer environment."
        echo
        echo "options:"
        (
            echo "    -h, --help: show usage help"
            echo "    -l: list available step names"
            echo "    -d: dry-run"
            echo "    -f: force install, do not ask for any confirmation"
            echo "    all: executes all steps"
            echo "    step-name(s): execute the given step(s)"
        ) | column -ts:
        echo
        echo "steps:"
        "$0" -l | sed 's/^/    /g'
        echo
        IFS=' '
        for I in "${ITEM_LISTS[@]}"; do
            show_items "$I"
        done
    ) >&2
    exit 1
}

# shellcheck source=~/.shell_control
source "$HOME/.shell_control" || echo "$(tput bold)error: ~/.shell_control not installed!$(tput sgr0)" >&2

################################################################################
# Step osx
################################################################################
step_osx()
{
    # Much of this step has been crafted from https://mths.be/osx

    ########################################
    # General
    ########################################
    HOST="$(uname -n)"
    query "Set hostname [$HOST]" "$HOST"
    if [[ -n "$REPLY" ]]; then
        run "sudo scutil --set HostName '$REPLY'"
    fi

    show "Set standby delay to 24 hours (default is 1 hour)"
    run "sudo pmset -a standbydelay 86400"

    show "Disable the sound effects on boot"
    run "sudo nvram SystemAudioVolume=" ""

    show "Enable verbose boot sequence"
    run "sudo nvram boot-args='-v'"

    show "Set sidebar icon size to medium"
    run "defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2"

    show "Expand save panel by default"
    run "defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true"
    run "defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true"

    show "Expand print panel by default"
    run "defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true"
    run "defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true"

    show "Save to disk (not to iCloud) by default"
    run "defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false"

    show "Automatically quit printer app once the print jobs complete"
    run "defaults write com.apple.print.PrintingPrefs 'Quit When Finished' -bool true"

    show "Disable the 'Are you sure you want to open this application?' dialog"
    run "defaults write com.apple.LaunchServices LSQuarantine -bool false"

    show "Remove duplicates in the 'Open With' menu (also see \`lscleanup\` alias)"
    run "/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"

    show "Reveal IP address, hostname, OS version, etc. when clicking the clock in the login window"
    run "sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName"

    ########################################
    # SSD-specific tweaks
    ########################################
    show "Disable local Time Machine snapshots"
    run "sudo tmutil disablelocal"

    show "Disable hibernation (speeds up entering sleep mode)"
    run "sudo pmset -a hibernatemode 0"

    show "Remove the sleep image file to save disk space"
    run "sudo rm /Private/var/vm/sleepimage"
    show "Create a zero-byte file instead..."
    run "sudo touch /Private/var/vm/sleepimage"
    show "...and make sure it can’t be rewritten"
    run "sudo chflags uchg /Private/var/vm/sleepimage"

    show "Disable the sudden motion sensor as it’s not useful for SSDs"
    run "sudo pmset -a sms 0"

    ########################################
    # Accessories and input
    ########################################
    show "Set a blazingly fast keyboard repeat rate"
    run "defaults write NSGlobalDomain KeyRepeat -int 0.02"

    show "Set a shorter Delay until key repeat"
    run "defaults write NSGlobalDomain InitialKeyRepeat -int 12"

    show "Enable repeat on keydown"
    run "defaults write -g ApplePressAndHoldEnabled -bool false"

    show "Menu bar: hide the Time Machine, Volume, and User icons"
    for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
        run "defaults write '${domain}' dontAutoLoad -array                   \
            '/System/Library/CoreServices/Menu Extras/TimeMachine.menu'       \
            '/System/Library/CoreServices/Menu Extras/Volume.menu'            \
            '/System/Library/CoreServices/Menu Extras/User.menu'"
    done
    run "defaults write com.apple.systemuiserver menuExtras -array            \
        '/System/Library/CoreServices/Menu Extras/Bluetooth.menu'             \
        '/System/Library/CoreServices/Menu Extras/AirPort.menu'               \
        '/System/Library/CoreServices/Menu Extras/Battery.menu'               \
        '/System/Library/CoreServices/Menu Extras/Clock.menu'"

    show "Trackpad: enable tap to click for this user and for the login screen"
    run "defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true"
    run "defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1"
    run "defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1"

    show "Disable 'natural' (Lion-style) scrolling"
    run "defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false"

    show "Increase sound quality for Bluetooth headphones/headsets"
    run "defaults write com.apple.BluetoothAudioAgent 'Apple Bitpool Min (editable)' -int 40"

    show "Use scroll gesture with the Ctrl (^) modifier key to zoom"
    run "defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true"
    run "defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144"

    show "Follow the keyboard focus while zoomed in"
    run "defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true"

    ########################################
    # Screen
    ########################################
    show "Save screenshots to the desktop"
    run "defaults write com.apple.screencapture location -string '${HOME}/Desktop'"

    show "Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)"
    run "defaults write com.apple.screencapture type -string 'png'"

    show "Disable shadow in screenshots"
    run "defaults write com.apple.screencapture disable-shadow -bool true"

    show "Enable subpixel font rendering on non-Apple LCDs"
    run "defaults write NSGlobalDomain AppleFontSmoothing -int 2"

    show "Enable HiDPI display modes (requires restart)"
    run "sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true"

    ########################################
    # Finder
    ########################################
    show "Finder: allow quitting via cmd + Q; doing so will also hide desktop icons"
    run "defaults write com.apple.finder QuitMenuItem -bool true"

    show "Show icons for hard drives, servers, and removable media on the desktop"
    run "defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true"
    run "defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true"
    run "defaults write com.apple.finder ShowMountedServersOnDesktop -bool true"
    run "defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true"

    show "Finder: show all filename extensions"
    run "defaults write NSGlobalDomain AppleShowAllExtensions -bool true"

    show "Finder: show status bar"
    run "defaults write com.apple.finder ShowStatusBar -bool true"

    show "Finder: show path bar"
    run "defaults write com.apple.finder ShowPathbar -bool true"

    show "Finder: allow text selection in Quick Look"
    run "defaults write com.apple.finder QLEnableTextSelection -bool true"

    show "Display full POSIX path as Finder window title"
    run "defaults write com.apple.finder _FXShowPosixPathInTitle -bool true"

    show "When performing a search, search the current folder by default"
    run "defaults write com.apple.finder FXDefaultSearchScope -string 'SCcf'"

    show "Disable the warning when changing a file extension"
    run "defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false"

    show "Enable spring loading for directories"
    run "defaults write NSGlobalDomain com.apple.springing.enabled -bool true"

    show "Remove the spring loading delay for directories"
    run "defaults write NSGlobalDomain com.apple.springing.delay -float 0"

    show "Avoid creating .DS_Store files on network volumes"
    run "defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true"

    show "Disable disk image verification"
    run "defaults write com.apple.frameworks.diskimages skip-verify -bool true"
    run "defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true"
    run "defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true"

    show "Automatically open a new Finder window when a volume is mounted"
    run "defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true"
    run "defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true"
    run "defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true"

    show "Show item info near icons on the desktop and in other icon views"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:showItemInfo true' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:showItemInfo true' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Show item info to the right of the icons on the desktop"
    run "/usr/libexec/PlistBuddy -c 'Set DesktopViewSettings:IconViewSettings:labelOnBottom false' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Enable snap-to-grid for icons in finder views"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:arrangeBy grid' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Sort icons on the desktop by date modified"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:arrangeBy dateModified' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Increase grid spacing for icons on the desktop and in other icon views"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:gridSpacing 100' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:gridSpacing 100' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Increase the size of icons on the desktop and in other icon views"
    run "/usr/libexec/PlistBuddy -c 'Set :DesktopViewSettings:IconViewSettings:iconSize 80' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :FK_StandardViewSettings:IconViewSettings:iconSize 80' '$HOME/Library/Preferences/com.apple.finder.plist'"
    run "/usr/libexec/PlistBuddy -c 'Set :StandardViewSettings:IconViewSettings:iconSize 80' '$HOME/Library/Preferences/com.apple.finder.plist'"

    show "Use list view in all Finder windows by default"
    # Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`
    run "defaults write com.apple.finder FXPreferredViewStyle -string 'Nlsv'"

    show "Disable the warning before emptying the Trash"
    run "defaults write com.apple.finder WarnOnEmptyTrash -bool false"

    show "Don't empty Trash securely by default"
    run "defaults write com.apple.finder EmptyTrashSecurely -bool false"

    show "Enable AirDrop over Ethernet and on unsupported Macs running Lion"
    run "defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true"

    show "Enable the MacBook Air SuperDrive on any Mac"
    run "sudo nvram boot-args='mbasd=1'"

    show "Expand the following File Info panes: 'General', 'Open with', and 'Sharing & Permissions'"
    run "defaults write com.apple.finder FXInfoPanesExpanded -dict             \
        General -bool true                                                     \
        OpenWith -bool true                                                    \
        Privileges -bool true"

    ########################################
    # Dock, Dashboard, and hot corners
    ########################################
    show "Enable highlight hover effect for the grid view of a stack (Dock)"
    run "defaults write com.apple.dock mouse-over-hilite-stack -bool true"

    show "Set the icon size of Dock items to 36 pixels"
    run "defaults write com.apple.dock tilesize -int 36"

    show "Enable spring loading for all Dock items"
    run "defaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true"

    show "Show indicator lights for open applications in the Dock"
    run "defaults write com.apple.dock show-process-indicators -bool true"

    show "Don’t automatically rearrange Spaces based on most recent use"
    run "defaults write com.apple.dock mru-spaces -bool false"

    show "Disable OS X Dashboard"
    run "defaults write com.apple.dashboard mcx-disabled -boolean YES"

    show "Make Dock icons of hidden applications translucent"
    run "defaults write com.apple.dock showhidden -bool true"

    # Hot corners
    # Possible values:
    #      0: no-op
    #      2: Mission Control
    #      3: Show application windows
    #      4: Desktop
    #      5: Start screen saver
    #      6: Disable screen saver
    #      7: Dashboard
    #     10: Put display to sleep
    #     11: Launchpad
    #     12: Notification Center
    show "Top left screen corner -> Mission Control"
    run "defaults write com.apple.dock wvous-tl-corner -int 2"
    run "defaults write com.apple.dock wvous-tl-modifier -int 0"
    show "Top right screen corner -> Start screen saver"
    run "defaults write com.apple.dock wvous-tr-corner -int 5"
    run "defaults write com.apple.dock wvous-tr-modifier -int 0"
    show "Bottom right screen corner -> Desktop"
    run "defaults write com.apple.dock wvous-br-corner -int 4"
    run "defaults write com.apple.dock wvous-br-modifier -int 0"
    show "Bottom left screen corner -> Show application windows"
    run "defaults write com.apple.dock wvous-bl-corner -int 3"
    run "defaults write com.apple.dock wvous-bl-modifier -int 0"

    show "Disable Ctrl+Up Mission Control shortcut"
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 32 \"{ enabled = 0; }\""
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 34 \"{ enabled = 0; }\""

    show "Disable Ctrl+Down Mission Control shortcut"
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 33 \"{ enabled = 0; }\""
    run "defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 35 \"{ enabled = 0; }\""

    ########################################
    # Safari
    ########################################
    show "Privacy: don’t send search queries to Apple"
    run "defaults write com.apple.Safari UniversalSearchEnabled -bool false"
    run "defaults write com.apple.Safari SuppressSearchSuggestions -bool true"

    show "Press Tab to highlight each item on a web page"
    run "defaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true"

    show "Show the full URL in the address bar (note: this still hides the scheme)"
    run "defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true"

    show "Set Safari’s home page to 'about:blank' for faster loading"
    run "defaults write com.apple.Safari HomePage -string 'about:blank'"

    show "Prevent Safari from opening ‘safe’ files automatically after downloading"
    run "defaults write com.apple.Safari AutoOpenSafeDownloads -bool false"

    show "Allow hitting the Backspace key to go to the previous page in history"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true"

    show "Hide Safari’s bookmarks bar by default"
    run "defaults write com.apple.Safari ShowFavoritesBar -bool false"

    show "Hide Safari’s sidebar in Top Sites"
    run "defaults write com.apple.Safari ShowSidebarInTopSites -bool false"

    show "Disable Safari’s thumbnail cache for History and Top Sites"
    run "defaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2"

    show "Enable Safari’s debug menu"
    run "defaults write com.apple.Safari IncludeInternalDebugMenu -bool true"

    show "Make Safari’s search banners default to Contains instead of Starts With"
    run "defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false"

    show "Remove useless icons from Safari’s bookmarks bar"
    run "defaults write com.apple.Safari ProxiesInBookmarksBar '()'"

    show "Enable the Develop menu and the Web Inspector in Safari"
    run "defaults write com.apple.Safari IncludeDevelopMenu -bool true"
    run "defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true"
    run "defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true"

    show "Add a context menu item for showing the Web Inspector in web views"
    run "defaults write NSGlobalDomain WebKitDeveloperExtras -bool true"

    ########################################
    # Mail
    ########################################
    show "Display emails in threaded mode, sorted by date (oldest at the top)"
    run "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'DisplayInThreadedMode' -string 'yes'"
    run "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'SortedDescending' -string 'yes'"
    run "defaults write com.apple.mail DraftsViewerAttributes -dict-add 'SortOrder' -string 'received-date'"

    ########################################
    # Spotlight
    ########################################
    show "Disable Spotlight indexing for any volume that gets mounted and has not yet been indexed before"
    run "sudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array '/Volumes'"

    ########################################
    # Time Machine
    ########################################
    show "Prevent Time Machine from prompting to use new hard drives as backup volume"
    run "defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true"

    show "Disable local Time Machine backups"
    run "hash tmutil &> /dev/null && sudo tmutil disablelocal"

    ########################################
    # iTunes
    ########################################
    show "Disable the Ping sidebar in iTunes"
    run "defaults write com.apple.iTunes disablePingSidebar -bool true"

    show "Disable ping dropdowns"
    run "defaults write com.apple.iTunes hide-ping-dropdown true"

    ########################################
    # Google Chrome
    ########################################
    show "Disable two finger gesture navigation on Chrome"
    run "defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false"
    run "defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false"

    show "Use the system-native print preview dialog in Chrome"
    run "defaults write com.google.Chrome DisablePrintPreview -bool true"
    run "defaults write com.google.Chrome.canary DisablePrintPreview -bool true"

    show "Disable recent items"
    run "defaults delete org.videolan.vlc.LSSharedFileList RecentDocuments"
    run "defaults write org.videolan.vlc NSRecentDocumentsLimit 0"
    run "defaults write org.videolan.vlc.LSSharedFileList RecentDocuments -dict-add MaxAmount 0"
    run "defaults delete com.apple.QuickTimePlayerX.LSSharedFileList RecentDocuments"
    run "defaults write com.apple.QuickTimePlayerX NSRecentDocumentsLimit 0"
    run "defaults write com.apple.QuickTimePlayerX.LSSharedFileList RecentDocuments -dict-add MaxAmount 0"

    ########################################
    # XQuartz
    ########################################
    show "Disable app_to_run for XQuartz X11"
    run "defaults write org.macosforge.xquartz.X11 app_to_run /usr/bin/true"

    ########################################
    # Kill affected applications
    ########################################
    for app in "Activity Monitor" "Address Book" "Calendar" "Contacts"         \
        "cfprefsd" "Dock" "Finder" "Mail" "Messages" "Safari" "SystemUIServer" \
        "Terminal" "Transmission" "iCal"; do
        killall "${app}" > /dev/null 2>&1
    done

    show -i "Done. Note that some of these changes require a logout/restart to take effect."
}

################################################################################
# Step xcode
################################################################################
step_xcode()
{
    if ! type xcode-select >/dev/null; then
        run "xcode-select --install"
    else
        if run "cc --version 2>/dev/null 1>&2"; then
            show "Xcode agreement is accepted."
        else
            show "Xcode agreement not accepted..."
            run "sudo cc --version" || abort "Xcode agreement NOT accepted"
        fi
    fi
    show "Xcode Command Line Tools are properly installed."
}

################################################################################
# Step java
################################################################################
step_java()
{
    show "Checking if java's installed..."
    run "java -version"
}

################################################################################
# Step brew
################################################################################
ensure_homebrew_tap()
{
    if ! brew tap | grep -q "$1"; then
        run "brew tap '$1'"
    fi
}

ensure_homebrew_updated()
{
    if [[ -z "$(which brew)" ]]; then
        abort "Please run step brew first"
    fi

    run "brew update"
    run "brew upgrade --all"
}

install_brew_formula()
{
    local INSTALLED="$2"
    if ! echo "$INSTALLED" | grep -q "$1"; then
        run "brew install '$1'"
    else
        show "brew formula '$1' already installed"
    fi

    # Force link the most recent version; can fix some annoying issues,
    # but is also slow and terrible and shouldn't be necessary.
    # run "brew unlink $1 && brew link --force --overwrite $1"
}

step_brew()
{
    if [[ -z "$(which brew)" ]]; then
        show "installing homebrew..."
        run "ruby -e \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\""
        export PATH="$PATH:/usr/local/bin" # make sure brew is in your PATH before continuing
    else
        show "Homebrew already installed"
    fi

    # fix permissions on /usr/local
    run "sudo chown -R $(whoami) /usr/local"

    if [[ -z "$(which brew)" ]]; then
        abort "failed to install Homebrew"
    fi

    ensure_homebrew_updated

    local INSTALLED
    INSTALLED="$(brew ls)"
    IFS=' '
    for I in $HOMEBREW_FORMULAS; do
        install_brew_formula "$I" "$INSTALLED"
    done

    # cmake's bundling utility fails in completely reasonable cases, the following steps are necessary
    run "chmod +w /usr/local/Cellar/freetds/*/lib/*.dylib 2>/dev/null"
    run "chmod +w /usr/local/Cellar/pcre/*/lib/*.dylib 2>/dev/null"

    # install glibtool and glibtoolize as the defaults
    run "ln -sf /usr/local/bin/glibtool /usr/local/bin/libtool"
    run "ln -sf /usr/local/bin/glibtoolize /usr/local/bin/libtoolize"

    # install the git remote-hg helper
    run "ln -sf $(brew ls -v git | grep git-remote-hg) /usr/local/bin"

    # unlink keg-only formulas which should not be not symlinked into /usr/local
    KEG_ONLY="bison gettext libffi openssl readline sqlite"
    run "brew unlink $KEG_ONLY"

    IFS=$'\n'
    for I in $(brew ls); do
        name="${I%@*}"
        if ! echo "$HOMEBREW_FORMULAS" | egrep -q "\\b$name\\b"; then
            case "$I" in
                "brew-cask");; "lib");; # ignored warnings
                *) show -i "$I installed but not managed by setup"
            esac
        fi
    done
}

################################################################################
# Step cask
################################################################################
install_brew_cask()
{
    local INSTALLED="$2"
    if ! echo "$INSTALLED" | egrep -q "$(echo "\\b$1\\b" | sed 's/ (!)//g')"; then
        run "brew cask install '$1'"
    else
        show "brew formula '$1' already installed"
    fi
}

step_cask()
{
    echo
    show -i "================================================================================"
    show -i "= Installing Casks is ESPECIALLY interactive, you WILL need to babysit this!   ="
    show -i "= For example, many Casks require additional manual steps after installation.  ="
    show -i "================================================================================"
    echo

    ensure_homebrew_updated
    install_brew_formula "caskroom/cask/brew-cask"

    local INSTALLED
    INSTALLED="$(brew cask list)"
    IFS=' '
    for I in $HOMEBREW_CASKS; do
        install_brew_cask "$I" "$INSTALLED"
    done

    IFS=$'\n'
    for I in $(brew cask list); do
        name="${I%@*}"
        if ! echo "$HOMEBREW_CASKS" | egrep -q "$(echo "\\b$name\\b" | sed 's/ (!)//g')"; then
            show -i "$I installed but not managed by setup"
        fi
    done
}

################################################################################
# Step atom
################################################################################
install_atom_pkg()
{
    local PKG="$1"
    local INSTALLED="$2"
    if ! echo "$INSTALLED" | egrep -qi "\\b${PKG}\\b"; then
        run "apm install '$PKG'" || abort "can not install package '$PKG'"
    else
        show "skipping $PKG: already installed"
    fi
}

step_atom()
{
    if ! type atom >/dev/null 2>&1; then
        ensure_homebrew_updated
        if ! brew ls | grep -q brew-cask; then
            abort "please run step cask first"
        fi
        install_brew_cask atom || abort "can't install atom via brew-cask"
    fi

    local INSTALLED
    INSTALLED="$(apm list --installed --bare | grep -i "$PKG")"
    IFS=' '
    for I in $ATOM_PACKAGES; do
        install_atom_pkg "$I" "$INSTALLED"
    done
    run "apm upgrade --confirm false"

    IFS=$'\n'
    for I in $(apm list -bi); do
        name="${I%@*}"
        if ! echo "$ATOM_PACKAGES" | egrep -qi "\\b${name}\\b"; then
            show -i "$I installed but not managed by setup"
        fi
    done
}

################################################################################
# Step zsh
################################################################################
ensure_add_shell()
{
    local BINARY="$1"
    local INSTALLED
    INSTALLED="$(grep "$BINARY" /etc/shells)"
    if [[ "$INSTALLED" == "" ]]; then
        run "echo '$BINARY' | sudo tee -a /etc/shells"
    fi
}

ensure_shell()
{
    NAME="$1"
    shift

    ensure_homebrew_updated
    for FORMULA in "$@"; do
        install_brew_formula "$FORMULA"
    done

    SHELL_BINARY="$(brew ls "$NAME" | grep "^.*/bin/.*$NAME\$")"
    ensure_add_shell "$SHELL_BINARY"

    BREW_SHELL_BINARY="$(brew --prefix)/bin/$NAME"
    ensure_add_shell "$BREW_SHELL_BINARY"
    run "sudo chsh -s '$BREW_SHELL_BINARY' '$(whoami)'"
}

step_zsh()
{
    # Not installing brew formula zsh-completions here because it is way out of date.
    ensure_shell zsh zsh
    if [[ -d "$HOME/.zsh-completions" ]]; then
        run "cd '$HOME/.zsh-completions' && git fetch origin && git reset --hard origin/master && git clean -fd"
    else
        run "cd '$HOME' && git clone git://github.com/zsh-users/zsh-completions.git .zsh-completions"
    fi
    run "ln -sf '$HOME/.zsh-completions/src' /usr/local/share/zsh-completions"
}

################################################################################
# Step bash
################################################################################
step_bash()
{
    # Not installing formula bash-completion here, because that is installed
    # by env/install. This is to get the most up to date development version
    # with git (if able), or to install from a tarball if git is not available.
    ensure_shell bash bash
}

################################################################################
# Step python
################################################################################
step_python()
{
    local ANACONDA_DIR_NAME="anaconda"

    # enter existing anaconda environment if it's detected
    [[ -d "$HOME/$ANACONDA_DIR_NAME/bin" ]] && export PATH="$HOME/$ANACONDA_DIR_NAME/bin:$PATH"

    if run "type conda >/dev/null 2>&1"; then
        # Remove anaconda so that `conda update --all` doesn't stupidly downgrade things.
        # See https://github.com/conda/conda/issues/463 for more details.
        run "conda remove --yes anaconda"

        # Update anaconda to the latest; commented out because we remove anaconda, above.
        # run "conda update --yes --prefix '$HOME/$ANACONDA_DIR_NAME' anaconda"

        # Sadly, `conda update --all` takes forever and is somewhat unreliable.
        run "conda update --yes --prefix '$HOME/$ANACONDA_DIR_NAME' --all"
    else
        curl_output="$(mktemp -d -t tmp.XXXXXXXXXX)"
        trap 'rm -rf $curl_output' EXIT

        local latest
        latest="$(curl -s http://repo.continuum.io/archive/.files.json \
                  | jq 'to_entries | sort_by(.value.mtime) | reverse | .[].key' \
                  | grep Anaconda- \
                  | grep -m 1 MacOSX-x86_64.sh | tr -d '"')" || abort "could not find latest Anaconda installer"
        latest="http://repo.continuum.io/archive/$latest"
        show "downloading $latest ..."
        run "curl -o '$curl_output/anaconda.sh' '$latest'" || abort "could not download Anaconda installer"
        run "bash '$curl_output/anaconda.sh' -b" || abort "could not install Anaconda"

        export PATH="$HOME/$ANACONDA_DIR_NAME/bin:$PATH"
        run "conda config --set changeps1 no"
        run "rm -rf '$curl_output'"
    fi

    # Remove terrible Anaconda launcher app from desktop (That's not where .app directories go anyway!)
    [[ -d "$HOME/Desktop/Launcher.app" ]] && run "rm -rf '$HOME/Desktop/Launcher.app'"

    # Install python packages that don't come with Anaconda... yet!
    run "pip install --upgrade pip"
    IFS=' '
    for I in $PIP_PACKAGES; do
        run "pip install -qU $I"
    done

    # Install conda packages that don't come pre-installed with Anaconda
    local CONDA_LIST
    CONDA_LIST="$(conda list | cut -f1 -d' ')"
    IFS=' '
    for I in $CONDA_PACKAGES; do
        if ! echo "$CONDA_LIST" | grep -q "$I"; then
            echo run "conda install -f --yes $I"
        fi
    done

    # Fix annoying ipython settings
    run "ipython profile create"
    run "perl -pi -e 's/.*confirm_exit.*/c.TerminalInteractiveShell.confirm_exit = False/' $HOME/.ipython/profile_default/ipython_config.py"
    run "perl -pi -e 's/.*display_banner.*/c.TerminalIPythonApp.display_banner = False/' $HOME/.ipython/profile_default/ipython_config.py"

    IFS=$'\n'
    for I in $CONDA_LIST; do
        name="${I%@*}"
        if [[ "$name" == "#" || "$name" == "_license" ]]; then
            continue
        fi
        if ! echo "$PIP_PACKAGES" | egrep -q "\\b$name\\b" && ! echo "$CONDA_PACKAGES" | egrep -q "\\b$name\\b"; then
            show -i "$I installed but not managed by setup"
        fi
    done
}

################################################################################
# Step gem
################################################################################
step_gem()
{
    run "yes | sudo gem install rubygems-update"
    run "yes | sudo update_rubygems"
    run "yes | sudo gem update -q --system"

    declare -a GEM_LIST
    GEM_LIST=($(gem list))

    IFS=' '
    for I in $GEM_PACKAGES; do
        if ! echo "${GEM_LIST[*]}" | grep -q "$I"; then
            run "yes | sudo gem install -q $I"
        fi
    done

    IFS=$'\n'
    for I in $(gem outdated | awk '{print $1}'); do
        run "yes | sudo gem update -q $I"
    done

    IFS=$'\n'
    for I in $(gem list -l); do
        name="${I%@*}"
        if [[ "$name" == "*** LOCAL GEMS ***" ]]; then
            continue
        fi
        if ! echo "$GEM_PACKAGES rubygems-update" | egrep -q "$(echo "\\b$name\\b" | cut -d' ' -f1)"; then
            show -i "$I installed but not managed by setup"
        fi
    done
}

################################################################################
# Step node
################################################################################
step_node()
{
    ensure_homebrew_updated
    install_brew_formula node

    # Homebrew Caveat
    # If you update npm itself, do NOT use the npm update command.
    # The upstream-recommended way to update npm is:
    run "npm install -g npm@latest"
    run "npm update -g"

    local INSTALLED
    INSTALLED="$(npm list -g --depth 0 | grep @ | cut -d' ' -f2 | cut -d@ -f1)"

    IFS=' '
    for I in $NODE_MODULES; do
        if ! echo "$INSTALLED" | egrep -q "\b$I\b"; then
            run "npm install -g $I"
        fi
    done

    IFS=$'\n'
    for I in $INSTALLED; do
        name="${I%@*}"
        if [[ "$name" == "npm" ]]; then
            continue
        fi
        if ! echo "$NODE_MODULES" | egrep -q "\b$name\b"; then
            show -i "$I installed but not managed by setup"
        fi
    done
}

################################################################################
# Main
################################################################################
if [[ $(id -u) == 0 ]]; then
    echo "Do not run this script as root." >&2
    exit 1
fi

if echo "$*" | egrep -q -- "--help|-h"; then
    usage
fi

if echo "$*" | egrep -q -- "--items|-i"; then
    IFS=' '
    for I in "${ITEM_LISTS[@]}"; do
        cleanup_item_list "$I"
    done
    exit 0
fi

OPTIND=1
LISTING=0
FORCE=0
ALL=0
DRYRUN=0
while getopts "lfd" opt; do
    case "$opt" in
        l) LISTING=1;;
        f) FORCE=1;;
        d) DRYRUN=1;;
    esac
done
shift $((OPTIND - 1))

# export force/dryrun settings to shell control variables (see ~/.shell_control)
export SC_FORCE="$FORCE"
export SC_DRYRUN="$DRYRUN"

if [[ $LISTING == 0 && -z "$1" ]]; then
    usage
fi

[[ $1 == all ]] && ALL=1

# key;  question
steps=(
    "osx;           Override OS X defaults settings and configuration"
    "xcode;         Ensure that Xcode Command Line Tools are installed"
    "java;          Ensure that Apple's java for OS X is installed"
    "brew;          Ensure Homebrew installed and formulas upgraded"
    "cask;          Ensure Homebrew Casks are installed"
    "atom;          Ensure Atom installed via Homebrew Cask and apm packages are upgraded"
    "zsh;           Ensure shell is latest version of zsh from Homebrew"
    "python;        Upgrade/Install Anaconda, pip packages, and conda packages"
    "gem;           Upgrade/Install gem packages and rubygems-update package"
    "node;          Ensure Node modules are installed"
)

LISTING_OUTPUT=""

IFS=$'\n'
let steps_taken=0
for step in "${steps[@]}"; do
    key="$(echo "$step" | cut -d';' -f1)"
    question="$(echo "$step" | cut -d';' -f2 | sed 's/^ *//g')"
    function="step_$key"

    if [[ $LISTING == 1 ]]; then
        LISTING_OUTPUT="$LISTING_OUTPUT$key: $question"$'\n'
        continue
    fi

    if [[ $ALL == 0 ]] && ! echo "$*" | egrep -q "\b$key\b"; then
        continue
    fi

    let steps_taken=$((steps_taken + 1))
    ask "[$key] $question?"
    if [[ "$REPLY" == "y" ]]; then
        show "Beginning step [$key]"
        eval "$function"
    fi
done

if [[ $LISTING == 1 ]]; then
    echo -n "$LISTING_OUTPUT" | column -ts:
fi

if [[ $LISTING == 0 && $steps_taken == 0 ]]; then
    abort "invalid step name(s): $(echo "$*" | tr '\n' ' ')"
fi
