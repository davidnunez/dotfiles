#!/bin/bash

# Installs development environment on OS X machines.

################################################################################
# Settings
################################################################################
HOMEBREW_FORMULAS="autoconf boost cmake coreutils cppunit dmd doxygen fontconfig freetype ghostscript git gnu-sed imagemagick jbig2dec jpeg libevent libmpc libpng libtiff libtool libyaml little-cms2 maven memcached mercurial mongodb ncftp node openssl ossp-uuid pcre pidof pkg-config plotutils postgresql readline ruby s3cmd scons spark sqlite unixodbc unrar watch wget xz yaml-cpp"
PIP_PACKAGES="bson pymongo fabric iniparse psycopg2 suds oauth2client google-api-python-client httplib2 tinycss termcolor"
CONDA_PACKAGES="dateutil pyzmq argcomplete"
GEM_PACKAGES="cap_gun archive-tar-minitar bson bson_ext bundler bundler-unload childprocess cuba erector gem-wrappers jekyll jewelbox log4r lolcat mongo net-ldap rack rack-protection railsless-deploy rubygems-bundler rvm shotgun yajl-ruby capistrano"

################################################################################
# Utilities
################################################################################
function usage()
{
    echo "usage: $(basename $0) [-l | all | step-name ]"
    echo "options:"
    echo "    -h: show usage help"
    echo "    -l: list available step names"
    echo "    -d: dry-run"
    echo "    -f: force install, do not ask for any confirmation"
    echo "    all: executes all steps"
    echo "    step-name: execute only the given step"
    exit 0
}

function show()
{
    echo $'\e[1;34m==>\e[0m\e[31m' $1 $'\e[0m'
}

function run()
{
    show "$1"
    if [[ $DRYRUN == 0 ]]; then
        eval "$1"
        return $?
    else
        return 0
    fi
}

function abort()
{
    if [[ -n "$2" ]]; then
        run "$2"
    fi
    echo $'\e[1;31merror:' $1 $'\e[0m' >&2
    exit 1
}

function ask()
{
    if [[ $FORCE = 1 ]]; then
        REPLY='y'
        return 0
    fi
    echo -n $'\n\e[1;35m'
    read -p "$1 (y/n) [n] ... "
    echo -n $'\e[0;0m'
}

################################################################################
# Steps
################################################################################
function step_setup_xcode() # xcode
{
    export SELECT="select"
    if [[ -z "$(which xcode-$SELECT)" ]]; then
        abort "install Xcode Command Line Tools first"
    fi
    if cc --version 2>/dev/null 1>&2; then
        show "Xcode agreement is accepted."
    else
        show "Xcode agreement not accepted..."
        run "sudo cc --version" || abort "Xcode agreement NOT accepted"
    fi
    show "Xcode Command Line Tools properly installed."
}

function step_check_java() # java
{
    show "Checking if java's installed..."
    java -version
}

function step_check_homebrew() # checkbrew
{
    diff <(echo "$HOMEBREW_FORMULAS" \
        | sort -u \
        | tr ' ' '\n') <(brew ls -1 \
        | sort -u) \
        | grep '[<>]' \
        | sort -u \
        | sed "s@^>@added:  @g;s@<@missing:@g" \
        | egrep -v "^missing:\s*openssl$|^missing:\s*readline$^missing:\s*sqlite$"
            # we expect openssl, readlin, and sqlite to be unlinked
}

function install_brew_formula()
{
    if [[ -z "$(brew ls | grep $1)" ]]; then
        run "brew install $1"
    else
        show "brew formula $1 already installed"
    fi

    # force link the most recent versions
    run "brew unlink $1 && brew link --force --overwrite $1"
}

function ensure_homebrew_updated()
{
    if [[ -z "$(which brew)" ]]; then
        abort "please install Homebrew first"
    fi

    run "brew update"
    run "brew upgrade"
}

function step_install_homebrew() # brew
{
    if [[ -z "$(which brew)" ]]; then
        show "installing homebrew..."
        ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
        export PATH="$PATH:/usr/local/bin" # make sure brew is in your PATH before continuing
    else
        show "Homebrew already installed"
    fi

    if [[ -z "$(which brew)" ]]; then
        abort "failed to install Homebrew"
    fi

    ensure_homebrew_updated

    IFS=$" "
    for I in $HOMEBREW_FORMULAS; do
        install_brew_formula $I
    done

    # cmake's bundling utility fails in completely reasonable cases, the following steps are necessary
    run "chmod +w /usr/local/Cellar/freetds/*/lib/*.dylib 2>/dev/null"
    run "chmod +w /usr/local/Cellar/pcre/*/lib/*.dylib 2>/dev/null"
    
    # install glibtool and glibtoolize as the defaults
    run "ln -sf /usr/local/bin/glibtool /usr/local/bin/libtool"
    run "ln -sf /usr/local/bin/glibtoolize /usr/local/bin/libtoolize"

    # install the git remote-hg helper
    ln -sf $(brew ls -v git | grep git-remote-hg) /usr/local/bin

    # unlink keg-only formulas which should not be not symlinked into /usr/local
    run "brew unlink openssl readline sqlite"
}

function step_install_python() # python
{
    # enter existing anaconda environment if it's detected
    [[ -d "$HOME/anaconda/bin" ]] && export PATH="$HOME/anaconda/bin:$PATH"

    if type conda >/dev/null 2>&1; then
        conda update --yes --prefix "$HOME/anaconda" anaconda
    else
        curl_output=$(mktemp -d -t tmp.XXXXXXXXXX)
        trap "rm -rf $curl_output" EXIT

        latest="http://repo.continuum.io/archive/$(curl -s http://repo.continuum.io/archive/index.html \
            | grep MacOSX-x86_64.sh \
            | perl -nl -e 'm@<a.*? href="(.+)">(.+)</a@ig; print "$2\0$1"' \
            | sort -nr \
            | head -n 1 \
            | cut -d '' -f2 \
            | sed 's@./@@')"
        show "downloading $latest ..."
        curl -o "$curl_output/anaconda.sh" "$latest"
        bash "$curl_output/anaconda.sh" -b

        # enter anaconda environment now that it's installed
        export PATH="$HOME/anaconda/bin:$PATH"

        conda config --set changeps1 no # prevent conda from setting my PS1
        rm -f "$HOME/Desktop/Launcher.app" # get rid of Launcher.app on Desktop

        rm -rf "$curl_output"
    fi

    # Install python packages that don't come with Anaconda... yet!
    IFS=$" "
    for I in $PIP_PACKAGES; do
        run "pip install -U $I"
    done

    # Install conda packages that don't come pre-installed with Anaconda
    for I in $CONDA_PACKAGES; do
        run "conda install -f --yes $I"
        run "conda update -f --yes $I"
    done

    # Fix annoying ipython settings
    run "ipython profile create"
    run "perl -pi -e 's/.*confirm_exit.*/c.TerminalInteractiveShell.confirm_exit = False/' $HOME/.ipython/profile_default/ipython_config.py"
    run "perl -pi -e 's/.*display_banner.*/c.TerminalIPythonApp.display_banner = False/' $HOME/.ipython/profile_default/ipython_config.py"
}

function step_install_gem() # gem
{
    run "yes | sudo gem install rubygems-update"
    run "yes | sudo update_rubygems"
    run "yes | sudo gem update -q --system"

    IFS=$" "
    for I in $GEM_PACKAGES; do
        run "yes | sudo gem update -q $I"
        if [[ -z "$(gem list $I | grep $I)" ]]; then
            run "yes | sudo gem install -q $I"
        fi
    done
}

function step_install_xquartz() # xquartz
{
    if type Xquartz >/dev/null 2>&1; then
        show "a Xquartz is already installed..."
        ask "Force re-install?"
        [[ "$REPLY" == "y" ]] || return
    fi

    # assuming the last file that's not alpha, beta, or rc is the latest xquartz installer
    local latest="$(curl -s "http://xquartz-dl.macosforge.org/SL/" \
        | grep ".dmg<" \
        | sed 's@^.*>XQuartz@XQuartz@g' \
        | sed 's@\(XQuartz-[^<]*\)</a></td><td[^>]*>\([^<]*\).*@\1@g' \
        | egrep -v "beta|alpha|_rc" \
        | tail -n 1)"
    show "found latest XQuartz as \"$latest\""

    local tempdir="$(mktemp -d -t tmp.XXXXXXXXXX)" || abort "can't create temp directory"
    local cleanup="umount /Volumes/$(basename $latest .dmg); rm -rf $tempdir"
    run "cd $tempdir" || abort "can't enter temp directory" "$cleanup"
    if [[ ! -f "/tmp/.install_dev/$latest" ]] ; then
        run "wget -c http://xquartz.macosforge.org/downloads/SL/$latest" || abort "can't acquire $latest" "$cleanup"
        run "cp $latest /tmp/.install_dev/$latest"
    else
        run "cp /tmp/.install_dev/$latest ."
    fi
    run "hdiutil mount $latest" || abort "can't mount $latest at /Volumes/$(basename $latest .dmg)" "$cleanup"
    run "sudo installer -pkg /Volumes/$(basename $latest .dmg)/XQuartz.pkg -target /" || abort "installer failed" "$cleanup"
    run "$cleanup"
}

function ensure_install_shell()
{
    local BINARY="$1"
    local INSTALLED="$(grep "$BINARY" /etc/shells)"
    if [[ "$INSTALLED" == "" ]]; then
        run "echo \"$BINARY\" | sudo tee -a /etc/shells"
    fi
}

function step_install_bash() # bash
{
    ensure_homebrew_updated
    install_brew_formula bash

    BASH_BINARY="$(brew ls bash | grep '^.*/bin/.*bash$')"
    ensure_install_shell "$BASH_BINARY"

    HB_BASH_BINARY="/usr/local/bin/bash"
    ensure_install_shell "$HB_BASH_BINARY"
    chsh -s "$HB_BASH_BINARY" "$(whoami)"
}

function step_install_tiddlywiki() # tiddlywiki
{
    ensure_homebrew_updated
    install_brew_formula node
    run "npm install -g tiddlywiki"
    run "mkdir -p $HOME/Library/LaunchDaemons"
    run "cd $HOME"
    if [[ -d notes ]]; then
        show "$(tput smul)WARNING$(tput sgr0): NOT overwriting \"$HOME/notes\", assuming tiddlywiki already installed there!"
    else
        run "tiddlywiki notes --init server"
    fi

    local TIDDLYWIKI_DOMAIN="org.tiddlywiki.server"
    show "Creating $HOME/Library/LaunchDaemons/org.tiddlywiki.server.plist..."
    cat >"$HOME/Library/LaunchDaemons/$TIDDLYWIKI_DOMAIN.plist" <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>Label</key>
        <string>$TIDDLYWIKI_DOMAIN</string>

        <key>WorkingDirectory</key>
        <string>$HOME</string>

        <key>ProgramArguments</key>
        <array>
            <string>$(which tiddlywiki)</string>
            <string>notes</string>
            <string>--server</string>
        </array>

        <key>RunAtLoad</key>
        <true/>

        <key>KeepAlive</key>
        <true/>
    </dict>
</plist>
EOF

    show "Creating /etc/launchd.conf..."
    echo 'setenv PATH "/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"' | sudo tee /etc/launchd.config

    run "launchctl unload $HOME/Library/LaunchAgents/org.tiddlywiki.server.plist"
    run "launchctl load -w $HOME/Library/LaunchAgents/org.tiddlywiki.server.plist"

    show "TiddlyWiki setup at $HOME/notes"
    show "Server running at http://127.0.0.1:8080/"
}

################################################################################
# Main
################################################################################
OPTIND=1
LISTING=0
FORCE=0
ALL=0
DRYRUN=0
while getopts "hlfd" opt; do
    case "$opt" in
        h) usage;;
        l) LISTING=1;;
        f) FORCE=1;;
        d) DRYRUN=1;;
    esac
done
shift $((OPTIND - 1))

if [[ $LISTING == 0 && -z "$1" ]]; then
    usage
fi

[[ $1 == all ]] && ALL=1

echo "$(tput bold)NOTE: This script is interactive, you will need to babysit it. Even in -f (force) mode you will still need to input your sudo password when asked for it.$(tput sgr0)"
echo "$(tput bold)Prerequisite: Install \"Command Line Tools\" from $(tput smul)http://developer.apple.com/downloads$(tput rmul) or from X Code preferences$(tput sgr0)"

mkdir -p /tmp/.install_dev # download cache

# key; question; function
steps=("xcode;Check that Command Line Tools are installed?;step_setup_xcode
brew;Upgrade/Install Homebrew, formulas: $HOMEBREW_FORMULAS?;step_install_homebrew
checkbrew;Check for additional or missing Homebrew packages?;step_check_homebrew
python;Upgrade/Install Anaconda, pip packages: $PIP_PACKAGES, conda packages: $CONDA_PACKAGES?;step_install_python
java;Check that java is installed (will prompt to install if not);step_check_java
gem;Upgrade/Install gem packages: rubygems-update $GEM_PACKAGES?;step_install_gem
xquartz;Install latest XQuartz package?;step_install_xquartz
bash;Install latest version of bash from Homebrew?;step_install_bash
tiddlywiki;Install and setup latest TiddlyWiki from Homebrew?;step_install_tiddlywiki")

IFS=$'\n'
let steps_taken=0
for step in $steps; do
    key="$(echo $step | cut -d';' -f1)"
    question="$(echo $step | cut -d';' -f2)"
    function="$(echo $step | cut -d';' -f3)"

    if [[ $LISTING == 1 ]]; then
        echo "$(tput bold)$key$(tput sgr0)  => $question"
        continue
    fi

    if [[ $ALL == 0 && -z "$(echo $@ | egrep "\b$key\b")" ]]; then
        continue
    fi

    let steps_taken=$(($steps_taken + 1))
    ask "[$key] $question"
    if [[ "$REPLY" == "y" ]]; then
        show "Beginning step [$key]"
        eval "$function"
    fi
done

if [[ $LISTING == 0 && $steps_taken == 0 ]]; then
    abort "invalid step name(s): $@"
fi

exit 0
