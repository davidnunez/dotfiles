#!/bin/bash

# updates env with whatever new changes are found in the current environment

source "$HOME/.shell_control" || echo "$(tput bold)error: ~/.shell_control not installed!$(tput sgr0)" >&2

# profile
run "rsync -apl '$HOME/.profile' ./dot_profile"
for I in "$HOME/".profile_*; do
    if [[ ! -f ignore ]] || ! grep -q "$(basename "$I")" ignore; then
        run "rsync -apl '$I' './$(basename "$I" | sed 's/^./dot_/')'"
    fi
done

# bash
[[ -f "$HOME/.bash_profile" ]] && run "rsync -apl '$HOME/.bash_profile' ./dot_bash_profile"
[[ -f "$HOME/.bashrc" ]] && run "rsync -apl '$HOME/.bashrc' ./dot_bashrc"

# zsh
[[ -f "$HOME/.zshrc" ]] && run "rsync -apl '$HOME/.zshrc' ./dot_zshrc"
[[ -f "$HOME/.zprofile" ]] && run "rsync -apl '$HOME/.zprofile' ./dot_zprofile"

# tools
[[ -f "$HOME/.shell_control" ]] && run "rsync -apl '$HOME/.shell_control' ./dot_shell_control"
[[ -f "$HOME/.dircolors" ]] && run "rsync -apl '$HOME/.dircolors' ./dot_dircolors"
[[ -f "$HOME/.inputrc" ]] && run "rsync -apl '$HOME/.inputrc' ./dot_inputrc"
[[ -f "$HOME/.vimrc" ]] && run "rsync -apl '$HOME/.vimrc' ./dot_vimrc"
[[ -f "$HOME/.hgignore" ]] && run "rsync -apl '$HOME/.hgignore' ./dot_hgignore"
[[ -f "$HOME/.hgrc" ]] && run "rsync -apl '$HOME/.hgrc' ./dot_hgrc"
[[ -f "$HOME/.gitconfig" ]] && run "rsync -apl '$HOME/.gitconfig' ./dot_gitconfig"
[[ -f "$HOME/.pythonrc" ]] && run "rsync -apl '$HOME/.pythonrc'.py ./dot_pythonrc.py"
[[ -f "$HOME/.toprc" ]] && run "rsync -apl '$HOME/.toprc' ./dot_toprc"
[[ -d "$HOME/.complete/" ]] && run "rsync -apl '$HOME/.complete/' ./dot_complete"

# atom
backup_atom()
{
    local atom_file="$1"
    local atom_file_path="$HOME/.atom/$atom_file"
    if [[ -f "$atom_file_path" ]]; then
        if [[ "$atom_file" == "config.cson" ]]                                 \
            && type jq >/dev/null                                              \
            && type cson2json >/dev/null                                       \
            && type json2cson >/dev/null; then
            # sort config.cson keys for consistency between updates
            local tempfile="$(mktemp -t tmp.XXXXXXXXXX.config.json)"
            run "cson2json '$atom_file_path' | jq -S '.' >'$tempfile'"
            run "json2cson '$tempfile' >'./atom.$atom_file'"
            run "rm '$tempfile'"
        else
            run "rsync -apl '$atom_file_path' ./atom.$atom_file"
        fi
    fi
}
backup_atom "config.cson"
backup_atom "keymap.cson"
backup_atom "init.coffee"
backup_atom "styles.less"

# sublime text
backup_st()
{
    if [[ -e "$1/$2" ]]; then
        run "rsync -apl '$1/$2' '$2'"
    fi
}
backup_st "$HOME/Library/Application Support/Sublime Text 3/Packages/User" "Preferences.sublime-settings"
backup_st "$HOME/Library/Application Support/Sublime Text 3/Packages/User" "SublimePython.sublime-settings"
