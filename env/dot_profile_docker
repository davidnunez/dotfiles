#! .profile_docker

# shellcheck source=.shell_control
source "$HOME/.shell_control" || echo "$(tput bold)error: ~/.shell_control not installed!$(tput sgr0)" >&2

# Docker Aliases
alias dc="docker-compose"
alias dm="docker-machine"
alias de="eval \"\`docker-machine env dev\`\""

# Local Development Tools
_ensure_docker_env() {
    [[ -n $DOCKER_HOST ]] && return 0
    run 'eval "`docker-machine env dev`"'
    if [[ -z $DOCKER_HOST ]]; then
        _err "docker vm is not running"
        return 1
    fi
}

dev() {
    op=$1
    [[ -z $1 ]] || shift
    case "$op" in
        init)       _dev_init "$@";;
        pull)       _dev_pull "$@";;
        stop)       _dev_stop "$@";;
        clean)      _dev_clean "$@";;
        *)          _err "unknown dev option. Options: init, pull, stop, clean";;
    esac
}

_dev_init() {
    run "docker-machine start dev" && run "eval \"$(docker-machine env dev)\""
    if [[ "$?" -ne "0" ]]; then
        grep "$(docker-machine ip dev)" /etc/hosts >/dev/null 2>&1
        if [[ "$?" -ne "0" ]]; then
            show -i "Please add \"$(docker-machine ip dev)\tdev\" to /etc/hosts"
            run "sudo $EDITOR /etc/hosts"
        fi
    fi
}

_dev_pull() {
    _ensure_docker_env || return 1
    for image in $(grep image docker-compose.yml | awk '{print $2}' | sort | uniq ); do
        run "docker pull $image | grep 'Status\|fs layer'"
        if [ "$?" -ne "0" ]; then
            failure="$failure $image"
        fi
    done
}

_dev_stop() {
    run "docker-machine stop dev"
}

_dev_clean() {
    _ensure_docker_env || return 1
    run "docker ps -aq | xargs docker kill"
    run "docker ps -aq | xargs docker rm"
    if [[ "$1" == "images" ]]; then # optionally remove old images
        run "docker images -aq -f dangling=true | xargs docker rmi --force"
        DOCKER_VERSION="$(docker --version | sed 's/Docker version //g;s/,.*//g')"
        MAJOR="$(echo $DOCKER_VERSION | cut -d. -f1)"
        MINOR="$(echo $DOCKER_VERSION | cut -d. -f2)"
        if [[ $MAJOR -gt 1 ]] || [[ $MAJOR -eq 1 && $MINOR -ge 9 ]]; then
            run "docker volume ls -qf dangling=true | xargs docker volume rm"
        else
            show -i "docker version less than 1.9, can not clean up dangling any dangling volumes"
        fi
    fi
}

# Shell Completions

_dev() {
    if type emulate 1>/dev/null 2>&1; then
        emulate -L ksh
    fi
    local cur="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"
    COMPREPLY=()
    if [[ -z "$prev" || $COMP_CWORD == 1 ]]; then
        local opts=("init" "pull" "stop" "clean" "migrate")
        COMPREPLY=($(compgen -W "$(echo -n "${opts[@]}")" -- "${cur}"))
        return 0
    fi
} &&
complete -o default -F _dev dev

# prefix docker ps with ips
function docker-ips() {
    docker ps | while read line; do
        if `echo $line | grep -q 'CONTAINER ID'`; then
            echo -e "IP ADDRESS\t$line"
        else
            CID=$(echo $line | awk '{print $1}');
            IP=$(docker inspect -f "{{ .NetworkSettings.IPAddress }}" $CID);
            printf "${IP}\t${line}\n"
        fi
    done;
}

function docker-clean-exited() {
    docker ps -a | while read line; do
        echo $line | grep '^CONTAINER ID' && continue;
        CID=$(echo $line | awk '{print $1}');
        docker inspect -f "{{ .State.Running }}" $CID | grep -q 'false' && docker rm -f $CID;

    done;
}

# add variable DOCKER_ID with UID of most recent container
alias docker-id='export DOCKER_ID=`docker ps -ql` && echo $DOCKER_ID'

# remove all containers
alias docker-rmall='docker stop $(docker ps -qa) && docker rm $(docker ps -qa) && docker rmi $(docker images -q)'

# kill all containers
alias docker-killall='docker kill $(docker ps -q)'

# inspect last container created
alias docker-inspect='docker inspect $(docker ps -ql) | less'

# get ip of container
alias docker-ip='docker inspect -f "{{ .NetworkSettings.IPAddress }}"'

# enter last container
alias docker-ns='nsenter --target $(docker inspect --format {{.State.Pid}} $(docker ps -ql)) --mount --uts --ipc --net --pid'

# docker run -it
alias docker-run='docker run -it '

# following based on https://github.com/rcmorano/docker-baids/blob/master/00-docker-baids

function docker-container-grep() {
    PATTERN=$@
    docker ps -a | grep $PATTERN | grep -v ^CONTAINER
}

function docker-container-grep-running() {
    PATTERN=$@
    docker ps | grep $PATTERN | grep -v ^CONTAINER
}

function docker-container-kill-pattern() {
    PATTERN=$@
    docker-container-grep-running $PATTERN | awk '{print $1}' | xargs -rI % bash -c 'echo $(docker kill %; echo "killed!");'
}

function docker-container-most-recent() {
    docker ps | grep -v ^CONTAINER | head -n1 | awk '{print $1}'
}

function docker-container-most-recent-killed() {
    docker ps -a | grep Exited | head -n1 | awk '{print $1}'
}

function docker-container-diff-most-recent() {
    LAST_CONTAINER=$(docker-container-most-recent)

    if [ ! -z "$LAST_CONTAINER" ]
    then
        docker diff $LAST_CONTAINER
    else
        echo "There are no running containers!"
    fi
}

function docker-container-get-ip() {
    CONTAINER_ID=$1
    if [ -z "$CONTAINER_ID" ]
    then
        CONTAINER_ID=$(docker-container-most-recent)
    fi
    if [ ! -z "$CONTAINER_ID" ]
    then
        docker inspect --format '{{ .NetworkSettings.IPAddress }}' $CONTAINER_ID
    else
        echo "There are no running containers!"
    fi
}

function docker-container-inspect-most-recent() {
    LAST_CONTAINER=$(docker-container-most-recent)
    if [ ! -z "$LAST_CONTAINER" ]
    then
        docker inspect $LAST_CONTAINER
    else
        echo "There are no running containers!"
    fi
}

function docker-container-get-root() {
    CONTAINER_ID=$1
    if [ -z "$CONTAINER_ID" ]
    then
        CONTAINER_ID=$(docker-container-most-recent)
    fi
    if [ ! -z "$CONTAINER_ID" ]
    then
        docker inspect --format '{{ .HostsPath }}' $CONTAINER_ID
    else
        echo "There are no running containers!"
    fi
}

function docker-container-map-port() {
    CONTAINER_ID=$1
    SRC_PORT=$2
    DST_PORT=$3
    CONTAINER_IP=$(docker-container-get-ip $CONTAINER_ID)
    iptables -t nat -A  DOCKER -p tcp --dport $SRC_PORT -j DNAT --to-destination $CONTAINER_IP:$DST_PORT
}

function docker-container-remove-all() {
    docker ps -a | grep -v ^CONTAINER | awk '{print $1}' | xargs -rI % bash -c 'echo $(docker kill %; echo "killed!"); echo $(docker rm %; echo "removed!")'
}

function docker-container-remove-all-non-running() {
    docker ps -a | grep -v ^CONTAINER | grep Exit | awk '{print $1}' | xargs -rI % bash -c 'echo $(docker kill %; echo "killed!"); echo $(docker rm %; echo "removed!")'
}

function docker-container-remove-pattern() {
    PATTERN=$@
    docker-container-kill-pattern $PATTERN
    docker-container-grep $PATTERN | awk '{print $1}' | xargs -rI % bash -c 'echo $(docker rm %; echo "removed!")'
}

function docker-enter() {
    NSENTER=/usr/local/bin/nsenter
    if [ ! -e $NSENTER ]
    then
        docker run --rm -v /usr/local/bin:/target jpetazzo/nsenter
    fi

    if [ -z "$1" ]; then
        echo "usage: docker-enter <container id/name> <command to run default:sh>"
    else
        CONTAINER_ID=$(docker inspect --format {{.State.Pid}} "$1")
        if [ -z "$CONTAINER_ID" ]; then
           exit 1
        fi
        shift
        "$NSENTER" --target $CONTAINER_ID --mount --uts --ipc --net --pid -- "$@"
    fi
}

function docker-image-grep() {
    PATTERN=$@
    docker images | grep $PATTERN | grep -v ^REPOSITORY
}

function docker-image-most-recent() {
    docker images | grep -v ^REPOSITORY | head -n1 | awk '{print $3}'
}

function docker-image-remove-all() {
    docker-container-remove-all
    docker images -a | grep -v ^REPOSITORY | awk '{print $3}' | xargs -rI % bash -c 'echo $(docker rmi %; echo "removed!");'
}

function docker-image-remove-orphan() {
    docker images | grep "<none>" | awk '{print $3}' | xargs -rI % bash -c 'echo $(docker rmi %; echo "removed!");'
}

function docker-image-remove-pattern() {
    PATTERN=$@
    docker-image-grep $PATTERN | awk '{print $1}' | xargs -rI % bash -c 'echo $(docker rmi %; echo "removed!");'
}
