#!/bin/bash

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "usage: ${0##*/} [uninstall]"
    echo "Configures environment settings for current user."
    exit 1
fi

INSTALL=1
if [[ "$1" == "uninstall" ]]; then
    INSTALL=0
fi

###############################################################################
# install shell control utilities
###############################################################################

pushd "$(dirname "$0")" >/dev/null

if [[ $INSTALL == 1 ]]; then
    rsync -apl dot_shell_control "$HOME/.shell_control"
fi
source "$HOME/.shell_control" || echo "$(tput bold)error: ~/.shell_control could not be installed!$(tput sgr0)" >&2

###############################################################################
# install dot files
###############################################################################
sync()
{
    run "rsync -apl '$1' '$2/$1'"
}

contains()
{
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

declare -a DOT_FILES
DOT_FILES=($(find ./* -maxdepth 1 -name "dot_*"))
show "found dot files: ${DOT_FILES[*]}..."

for I in dot_*; do
    # don't do anything with ignored files
    if [[ -f ignore ]] && grep -q "$(basename "$I")" ignore; then
        continue
    fi

    # don't do anything with files that aren't dot files
    if ! contains "./$I" "${DOT_FILES[@]}"; then
        continue
    fi

    if [[ -f $I ]]; then
        if [[ $INSTALL == 1 ]]; then
            run "rsync -apl '$I' '$HOME/.$(basename "$I" | sed s/^dot_//)'"
        else
            run "rm -f '$HOME/.$(basename "$I" | sed s/^dot_//)'"
        fi
    elif [[ -d $I ]]; then
        if [[ $INSTALL == 1 ]]; then
            run "rsync -apl '$I/'* '$HOME/.$(basename "$I" | sed s/^dot_//)/'"
        else
            run "rm -rf '$HOME/.$(basename "$I" | sed s/^dot_//)/'"
        fi
    else
        abort "'$I' is not a directory or file, unsure how to proceed..."
    fi
done

###############################################################################
# Install bash-completion form debian:
###############################################################################
if [[ $INSTALL == 1 ]] && echo "$SHELL" | grep -q bash; then
    if type git 1>/dev/null 2>&1; then
        # From git:
        if [[ -d "$HOME/.bash-completion/.git" ]]; then (
            # exists and is a repo, update it
            run "pushd '$HOME/.bash-completion' >/dev/null"
            run "git fetch >/dev/null"
            run "git clean -fd >/dev/null"
            run "git reset --hard origin/master >/dev/null"
        ) else (
            if [[ -d "$HOME/.bash-completion" ]]; then (
                # exists and isn't a repo, blow it away
                run "pushd '$HOME' >/dev/null"
                run "rm -rf .bash-completion"
            ) fi
            # doesn't exist, clone it
            run "pushd '$HOME' >/dev/null"
            run "git clone git://git.debian.org/git/bash-completion/bash-completion .bash-completion >/dev/null"
        ) fi
    else
        # From tarball:
        CURL_OUTPUT=$(mktemp -d -t tmp.XXXXXXXXXX)
        trap 'rm -rf $CURL_OUTPUT' EXIT
        LATEST_BASH_COMPLETION="$(curl -s --show-error http://bash-completion.alioth.debian.org/files/ | sed 's/.*href="\([^"]*\)">[^<]*<\/a><\/td><td align="right">\([^<]*\).*/\1 \2/g' | egrep "^bash-completion.*tar.gz " | sort -k2 -d | tail -n 1 | cut -f1 -d' ')"
        (
            run "pushd '$CURL_OUTPUT' >/dev/null"
              run "curl -s --show-error -O 'http://bash-completion.alioth.debian.org/files/$LATEST_BASH_COMPLETION'"
              run "mkdir -p '$HOME/.bash-completion'"
              run "tar xzf '$LATEST_BASH_COMPLETION' -C '$HOME/.bash-completion' --strip-components=1"
        )
    fi
else
    [[ -d "$HOME/.bash-completion" ]] && run "rm -rf '$HOME/.bash-completion'"
fi

###############################################################################
# Install base16-shell
###############################################################################
if [[ $INSTALL == 1 ]]; then
    if type git 1>/dev/null 2>&1; then
        if [[ -d "$HOME/.config/base16-shell" ]]; then
            run "pushd '$HOME/.config/base16-shell' >/dev/null"
            run "git fetch >/dev/null"
            run "git clean -fd >/dev/null"
            run "git reset --hard origin/master >/dev/null"
        else
            run "git clone https://github.com/chriskempson/base16-shell.git '$HOME/.config/base16-shell'"
        fi
    else
        warn "could not git clone base16-shell, please install git"
    fi
else
    [[ -d "$HOME/.config/base16-shell" ]] && run "rm -rf '$HOME/.config/base16-shell'"
fi

###############################################################################
# Install Atom Editor Settings
###############################################################################
if [[ -d "$HOME/.atom" ]]; then
    for I in atom.*; do
        if [[ $INSTALL == 1 ]]; then
            # special handling for install of $HOME/.atom/config.cson
            if [[ "$I" == "atom.config.cson" && -e "$HOME/.atom/config.cson" ]] \
                && type jq >/dev/null                                           \
                && type cson2json >/dev/null                                    \
                && type json2cson >/dev/null; then
                # pull atom-pair settings out of current config
                atom_pair_settings="$(mktemp -t tmp.XXXXXXXXXX.atom_pair_settings.json)"
                run "cson2json '$HOME/.atom/config.cson' | jq -S '.[\"*\"] | {\"*\": {\"atom-pair\": .\"atom-pair\"} }' >'$atom_pair_settings'"
                # convert backup into json
                atom_config_backup="$(mktemp -t tmp.XXXXXXXXXX.atom_config_backup.json)"
                run "cson2json '$I' | jq -S '.' >'$atom_config_backup'"
                # merge backup and atom-pair settings
                atom_merged_config="$(mktemp -t tmp.XXXXXXXXXX.atom_merged_config.json)"
                run "jq '$(jq -c . "$atom_pair_settings") * .' '$atom_config_backup' > '$atom_merged_config'"
                # install merged config
                atom_config="$(mktemp -t tmp.XXXXXXXXXX.atom_merged_config.cson)"
                run "json2cson '$atom_merged_config' >'$atom_config'"
                run "rsync -apl '$atom_config' '$HOME/.atom/config.cson'"
                run "rm '$atom_pair_settings' '$atom_config_backup' '$atom_merged_config' '$atom_config'"
            else
                run "rsync -apl '$I' '$HOME/.atom/${I//atom./}'"
            fi
        else
            run "rm -f '$HOME/.atom/${I//atom./}'"
        fi
    done
fi

###############################################################################
# Install System Fonts
###############################################################################
ensure_font_installed()
{
    local NAME INSTALL
    NAME="$1"
    INSTALL="$2"
    if [[ $INSTALL == 1 ]]; then
        [[ -d "$HOME/.fonts" ]] || run "mkdir -p '$HOME/.fonts'"
        [[ -f "$HOME/.fonts/$NAME" ]] || run "cp -f '$NAME' '$HOME/.fonts'"
        if [[ -d "/Library/Fonts" && ! -f "/Library/Fonts/$NAME" ]]; then
            run "cp -f '$NAME' /Library/Fonts"
        fi
    else
        if [[ -d "/Library/Fonts" && -f "/Library/Fonts/$NAME" ]]; then
            run "rm -f '/Library/Fonts/$NAME'"
        fi
        [[ -f "$HOME/.fonts/$NAME" ]] && run "rm -f '$HOME/.fonts/$NAME'"
        [[ -d "$HOME/.fonts" ]] && run "rmdir '$HOME/.fonts'"
    fi
}
ensure_font_installed Inconsolata.otf "$INSTALL"

###############################################################################
# Done!
###############################################################################

if [[ $INSTALL == 1 ]]; then
    show "env install complete!"
else
    show "env uninstall complete!"
fi
