# .bashrc

INTERACTIVE=false
if [[ $- == *i* ]]; then
	INTERACTIVE=true
fi

# setup paths
PATH=""
[[ -d "$HOME/bin" ]] && PATH="$HOME/bin"
[[ -d /usr/local/bin ]] && PATH="$PATH:/usr/local/bin"
[[ -d /usr/local/sbin ]] && PATH="$PATH:/usr/local/sbin"
[[ -d /opt/local/bin ]] && PATH="$PATH:/opt/local/bin"
[[ -d /opt/local/sbin ]] && PATH="$PATH:/opt/local/sbin"
[[ -d /usr/bin ]] && PATH="$PATH:/usr/bin"
[[ -d /usr/sbin ]] && PATH="$PATH:/usr/sbin"
[[ -d /sbin ]] && PATH="$PATH:/sbin"
[[ -d /bin ]] && PATH="$PATH:/bin"
[[ -d /usr/X11R6/bin ]] && PATH="$PATH:/usr/X11R6/bin"
[[ -d /usr/local/lib/svn-python ]] && PYTHONPATH="/usr/local/lib/svn-python:$PYTHONPATH"
[[ -d /opt/local/lib/pkgconfig ]] && PKG_CONFIG_PATH="/opt/local/lib/pkgconfig:$PKG_CONFIG_PATH"
[[ -d /usr/local/lib/pkgconfig ]] && PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
if type brew >/dev/null 2>&1; then
	BREW_COREUTILS_PREFIX="$(brew --prefix coreutils 2>/dev/null)"
	if [[ $? == 0 ]]; then
		[[ -d $BREW_COREUTILS_PREFIX/libexec/gnubin ]] && PATH="$BREW_COREUTILS_PREFIX/libexec/gnubin:$PATH"
		[[ -d $BREW_COREUTILS_PREFIX/libexec/gnuman ]] && MANPATH="$BREW_COREUTILS_PREFIX/libexec/gnuman:$MANPATH"
	fi
	BREW_PREFIX="$(brew --prefix)"
	PATH="$PATH:$BREW_PREFIX/share/python:$BREW_PREFIX/bin:$BREW_PREFIX/sbin"
	PYTHONPATH="$BREW_PREFIX/lib/python2.7/site-packages:$PYTHONPATH"
fi
PYTHONPATH="$HOME/clickforensics/Common/Python:$PYTHONPATH"

export PATH
export MANPATH
export PYTHONPATH
export PKG_CONFIG_PATH
export USER="$(whoami)"
export HOST="$(uname -n)"

if $INTERACTIVE; then

# interactive settings
echo "$(date +%H:%M:%S.%N) - interactive settings"
stty erase '^?' eol ^@ start ^q stop ^s intr ^c
shopt -s checkwinsize
set -o emacs
set filec

# dummy function
function _set_color_and_title
{
	echo -n ""
}

# history setup
echo "$(date +%H:%M:%S.%N) - history setup"
export HISTFILE="$HOME/.bash_history.$(uname -s)"
export HISTCONTROL=ignoredups:erasedups
export HISTSIZE=100000
export HISTFILESIZE=100000
shopt -s histappend
shopt -s histreedit
shopt -s histverify

function _bash_history_sync
{
	builtin history -a
	HISTFILESIZE=$HISTSIZE
	builtin history -c
	builtin history -r
}

function history
{
	_bash_history_sync
	builtin history "$@"
}

# for PROMPT_COMMAND, see below
function _bash_history_append
{
	builtin history -a
}

function ostype
{
	if [ -n "$OS" ]; then
		echo $OS
		return 0
	fi
	
	local OS="$(uname -s)"
	local CHIP=unknown
	
	case "$OS" in
		SunOS|IRIX64|Darwin)
			local CHIP="$(uname -p)"
			;;
		
		Linux|machten)
			local CHIP="$(uname -m)"
			;;
		
		"Mac OS")
			local OS="MacOS"
			local CHIP="$(uname -p)"
			;;
	esac
	
	echo "$OS-$CHIP"
	return 0
}

# setup bash completions
echo "$(date +%H:%M:%S.%N) - setup bash completions"
function _source_completions
{
	if [[ -d "$1" ]]; then
		for I in "$1"/*; do
			source "$I" 2>/dev/null
		done
	elif [[ -f "$1" ]]; then
		source "$1" 2>/dev/null
	fi
}
_source_completions /usr/local/etc/bash_completion.d 2>/dev/null
_source_completions ~/.bash_completion.d 2>/dev/null
_source_completions /etc/bash_completion 2>/dev/null
_source_completions ~/.bash-completion/bash_completion 2>/dev/null # git.debian.org/git/bash-completion
complete -cf sudo

# setup PROMPT_COMMAND
function _repo
{
	branch=$(type __git_ps1 &>/dev/null && __git_ps1 "%s")
	if [[ -n "$branch" ]]; then
		vcs=git
	else
		branch=$(type -P hg &>/dev/null && hg branch 2>/dev/null)
		if [[ -n "$branch" ]]; then
			vcs=hg
		elif [[ -e .bzr ]]; then
			vcs=bzr
		elif [[ -e .svn ]]; then
			vcs=svn
		else
			vcs=
		fi
	fi
	if [[ -n "$vcs" ]]; then
		if [[ -n "$branch" ]]; then
			repo="$vcs: $branch"
		else
			repo="$vcs"
		fi
		echo -n "# $repo"
	fi
}

function _prompt_usernote
{
	if [[ -n "$PROMPT_USER_NOTE" ]]; then
		echo -n "# $PROMPT_USER_NOTE"
	fi
}

function _set_color_and_title
{
local   BLUE="\[\e[0;34m\]"
local    RED="\[\e[0;31m\]"
local   BRED="\[\e[1;38;5;160m\]"
local BGREEN="\[\e[1;32m\]"
local  BLACK="\[\e[0m\]"
local   GREY="\[\e[0;38;5;241m\]"

local TERMINAL_TITLE="$TERMINAL_TITLE_USER`if [[ -n \"$TERMINAL_TITLE_USER\" ]]; then printf ' '; fi`$USER@$HOST:\w"
local PROMPT_LINE_1="$RED\w $GREY$(_repo) $BLUE$(_prompt_usernote)"
local PROMPT_LINE_2="$RED$(date +%H%M) $(ostype | sed 's/Linux-//g') \u@\h\`if [ \$? = 0 ]; then echo \"$BGREEN\$\"; else echo \"$BRED>\"; fi\`$BLACK"

PS1="\e]2;${TERMINAL_TITLE}\a\
${PROMPT_LINE_1}\n\
${PROMPT_LINE_2} "
PS2="> "
PS3="#? "
PS4="$0:$LINENO: "
} # function _set_color_and_title

export PROMPT_COMMAND='_bash_history_append; _set_color_and_title ' # single quotes to avoid variable expansion

# allow user to provide override for terminal title
function title
{
	export TERMINAL_TITLE_USER="$@"
}

# allow user to provide override for terminal prompt note
function note
{
	export PROMPT_USER_NOTE="$@"
}

# setup aliases
alias wchmod="stat -c '%A %a %n' "
alias st='stree '
alias bc='bc -l '
alias ftp='ncftp '
alias profile='valgrind --tool=callgrind --dump-instr=yes --simulate-cache=yes --collect-jumps=yes '
alias memcheck='valgrind --tool=memcheck --leak-check=yes -show-reachable=yes -fno-inline --logfile=memcheck.log '
alias hist='history '

# setup ssh
export RSYNC_RSH=rsh
alias ssh='ssh -Y -C '

function ip
{
	host "$1" 1>/dev/null 2>&1
	rvalue=$?
	host "$1" | grep "has address" | awk '{print $4}'
	return $rvalue
}

function ifl
{
	echo `ifconfig \
		| perl -pe 'chomp; if (s/\t/ /g) {; } else { print "\n" };' \
		| grep -E 'inet.[0-9]' \
		| grep -v '127.0.0.1' \
		| awk '{ split($0, halves, "inet "); split(halves[2], vals, " "); print $1 vals[1];}' \
		| tr "\n" " " \
		| sed 's/[ \t]*$//'` wlan:`curl -s http://slurpware.org/`
}

function eman
{
	man "$@" | col -bx | subl --stay &
}

function pdfman
{
	man -t $@ | pstopdf -i -o /tmp/$1.pdf && open /tmp/$1.pdf
}

function fawk
{
	awk "{print \$$1}"
}

function ew
{
	if which $1 2>&1 >/dev/null; then
		edit $(which $1)
	fi
}

# setup ls
echo "$(date +%H:%M:%S.%N) - setup ls"
if type dircolors >/dev/null 2>&1; then
	eval `dircolors -b ~/.dircolors`
	alias ls='ls -hF --color=auto'
fi
export CLICOLOR=1
alias l='ls '
alias ll='ls -l '

# use gnu-sed if available
if type gsed >/dev/null 2>&1; then
	alias sed='gsed '
fi

# setup grep
export GREP_OPTIONS='--color=auto' GREP_COLOR='7;35'

# setup editor
export EDITOR=vim
export CVSEDITOR=vim
export XEDITOR=edit
export IGNOREEOF=0

# setup man
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'                           
export LESS_TERMCAP_so=$'\E[01;44;33m'                                 
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# source any local configuration files
for I in `/bin/ls -1 ~/.bashrc_* 2>/dev/null` ; do
	echo "$(date +%H:%M:%S.%N) - sourcing $I"
	. "$I"
done

echo "$(date +%H:%M:%S.%N) - environment setup complete"

fi # if $INTERACTIVE; then
